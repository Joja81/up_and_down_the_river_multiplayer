
- clear (Delete)
	Clears server

Setup API calls (all "start/")

- create_game (Post)
	Creates game and makes current user the owner of it. Should start game with 6 cards each.

	Input
	- name (String)

	Output
	- token
	- num_cards (Integer)
	- is_owner (Boolean)
	- game_id (Integer)
	- user_names[] (String)

	Error
	- InputError: Name greater then 255 or less then 1 character, name matches user already joined

- join_game (Post)
	Joins game with code
	
	Input
	- game_id (Integer)
	- name (String)	

	Output
	- token
	- num_cards (Integer)
	- is_owner (Boolean)
	- game_id (Integer)
	- user_names[] (String)

	Error
	- InputError: game_id is invalid; Name greater then 255 or less then 1 character, name matches user already joined; Game full for number of cards set

- change_num_cards (Post)
	Allows owner to change number of cards

	Input
	- token
	- num_cards (Integer)

	Output
	- None

	Error
	- AccessError: token is invalid, user is not owner
	- InputError: Num of cards greater then allowed with num of players(Can't use more then 51 cards), num_cards < 1

- update_start_screen (Get)
	Updates users screen to show new users added and change to num of cards
	
	Input
	- token

	Output
	- num_cards (Integer)
	- is_owner (Boolean)
	- game_id(Integer)
	- user_names[] (String)
	- game_started (Boolean)

	Error
	- AccessError: token is invalid

- start_game (Post)
	Starts game if user is the owner and there are players in the game
	
	Input
	- token

	Output
	- game_started (Boolean)

	Error AccessError: Token is invalid; User is not the owner of the game
	
Collect guesses API calls (all "guess/")

- var Card
	- suit (String) "C, D, H, S"
	- rank (String) "2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K, A"

- var Guess
	- player_name (String)
	- player_guess (Integer)

- collect_cards (Get)
	Gives list of users cards

	Input
	- token

	Output
	- cards [Card]
	- trump (card)

	InputError if cards haven't been allocated

- get_guesses(Get)
	Gets guesses of user who've already guessed

	Input
	- token

	Output
	- guesses [Guess]
	- current_guesser (String) # Name of user currently guessing
	- user_guess (Boolean)
	- is_guessing_complete (Boolean)

	InputError if not in guessing stage

- give_guess (Post)
	Sends user guess

	Input
	- token
	- guess (Integer)

	Output
	- None

	InputError if not users turn or if guess is out of bounds <0 or >num_cards or last user and total adds up wrong

Playing API calls (all start with "play/")

- var score
	- name (String)
	- score	(Integer)

- get_curr_cards(Get)
	Gives list of cards user currently has	

	Input
	- token

	Output
	- cards [Card]
	- trump (card)

	InputError if not in playing stage

- get_current_play(Get)
	Gives what other players have played in this play

	Input
	- token

	Output
	- cards [Card]
	- play_num (Integer)
	- curr_user_turn (String)
	- is_player_turn (Boolean)
	- is_finished (Boolean)

	InputError if not in playing stage or score stage

- get_curr_wins(Get)
	Gives how many plays each player has won this round
	
	Input
	- token

	Output
	- scores [Scores]

	InputError if not in playing stage

- give_play(Post)
	Player gives card they wish to play

	Input
	- token
	- play (Card)

	Output
	- None

	InputError if not in playing stage or not user turn

Results API calls ("result")

-var result
	- name (String)
	- score (Integer)
	- change (Integer)
	- is_user
	

- get_curr_results(Get)
	Gives list of results for users

	Input
	- token
	
  	Output
	-results [result]
	-game_finished


Game calls: Extra calls to help with navigation

- get_curr_location(Get)
    Input
    - token

    Output
    - game_location (String)
        g = guess
        p = playing
        r = results or finished